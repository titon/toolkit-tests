/**
 * @copyright   2010-2015, The Titon Project
 * @license     http://opensource.org/licenses/BSD-3-Clause
 * @link        http://titon.io
 */
/**
 * @copyright   2010-2015, The Titon Project
 * @license     http://opensource.org/licenses/BSD-3-Clause
 * @link        http://titon.io
 */
/**
 * Return the value of a setting from the primary `$toolkit` map.
 *
 * @param string $key
 */
/**
 * Return the value of a theme setting from the `$toolkit-settings-theme` map.
 *
 * @param string $key
 */
/**
 * Return the range of a breakpoint setting from the `$toolkit-settings-breakpoints` map.
 * If the second argument is defined, the index in the range will be returned.
 *
 * @param string $key
 */
/**
 * Check if a feature flag is enabled.
 *
 * @param string $feature
 */
/**
 * Return the current bi-directional alignment based on the `text-direction` setting.
 */
/**
 * Return the opposite bi-directional alignment based on the `text-direction` setting.
 */
/**
 * Return a transparent black CSS color.
 *
 * @param int $opacity
 */
/**
 * Return a transparent white CSS color.
 *
 * @param int $opacity
 */
/**
 * Take a list of classes and generate a selector list.
 *
 * @param list $classes
 * @param bool [$inherit] - Apply classes to the wrapping selector
 */
/**
 * Remove the first selector character (#, .) from the class name or ID.
 *
 * @param string $selector
 */
/**
 * Generate a class name and apply an optional prefix.
 *
 * @param string $class
 * @param string [$prefix]
 * @param string [$selector]
 */
/**
 * Build a class name in the BEM specification.
 *
 * @param string $block
 * @param string $element
 * @param string $modifier
 * @param string [$element-separator]
 * @param string [$modifier-separator]
 * @param string [$prefix]
 */
/**
 * Calculate the gutter spacing as a percentage. Use the max width of the grid to calculate against.
 *
 * @param int $width - The max width of the container
 * @param int $gutter - The space between each cell
 */
/**
 * Calculate the width of an individual element within a row. Take into account max widths and gutters.
 *
 * @param int $n - The current column
 * @param int $columns - The total number of columns
 * @param int $width - The max width of the container
 * @param int $gutter - The spacing in between each block
 */
/**
 * Remove the unit and return the integer.
 *
 * @param int|string $value
 */
/**
 * Convert a unit value to a pixel while using `base-font-size` as the reference.
 *
 * @param int|string $from
 */
/**
 * Convert a unit value to a percentage while using `base-font-size` as the reference.
 *
 * @param int|string $from
 */
/**
 * Convert a unit value to a rem unit while using `base-font-size` as the reference.
 *
 * @param int|string $from
 */
/**
 * Convert a unit value to an em unit while using `base-font-size` as the reference.
 *
 * @param int|string $from
 */
/**
 * TOOLKIT SETTINGS
 *
 * Configure Toolkit itself, by customizing the final generated output.
 */
/**
 * FEATURE FLAGS
 *
 * Flags can be used to enable or disable specific features within Toolkit.
 * If a feature is disabled, it will not be compiled in the output.
 */
/**
 * THEME STYLES
 *
 * Customize the default layout and structural styles as well as state and theme colors.
 */
/**
 * Z-INDEX
 *
 * A mapping of plugins and their z-index value, to easily layer and stack appropriately.
 *
 *  1) Modal and Showcase should be higher than Blackout
 *  2) Tooltip and Popover should be higher than Modals in case they exist within them
 *  3) Off Canvas should be the lowest so everything can display above it
 */
/**
 * BREAKPOINT RANGES
 *
 * A mapping of media query aliases to pixel based breakpoint ranges (defined as a list).
 * These ranges are used extensively to provide integrated responsive design support.
 */
/**
 * @copyright   2010-2015, The Titon Project
 * @license     http://opensource.org/licenses/BSD-3-Clause
 * @link        http://titon.io
 */
/**
 * Compile a component into the final output only once.
 * Also check to see if it has been excluded from the output all together.
 *
 * @param string $module
 */
/**
 * Clear all floats within the container.
 */
/**
 * Render small font sizes and padding.
 */
/**
 * Render medium font sizes and padding (default size).
 */
/**
 * Render large font sizes and padding.
 */
/**
 * Generate a self selector or parent selector for assigning size classes

 * @param bool [$self] - Apply to self
 * @param bool [$parent] - Apply to parent
 */
/**
 * Include content for the small size if enabled in the feature flags.
 *
 * @param bool [$self] - Apply to self
 * @param bool [$parent] - Apply to parent
 */
/**
 * Include content for the large size if enabled in the feature flags.
 *
 * @param bool [$self] - Apply to self
 * @param bool [$parent] - Apply to parent
 */
/**
 * Include content for LTR elements.
 */
/**
 * Include content for RTL elements.
 */
/**
 * @copyright   2010-2015, The Titon Project
 * @license     http://opensource.org/licenses/BSD-3-Clause
 * @link        http://titon.io
 */
/**
 * Calculate the width of an individual grid column. Take into account max widths and gutters.
 *
 * @param int $n - The current column
 * @param int $columns - The total number of columns
 * @param int [$width] - The max width of the grid container
 * @param int [$gutter] - The spacing in between each column
 */
/**
 * Styles for the grid row containing the columns.
 *
 * @param int [$width] - The max width of the grid container
 */
/**
 * Styles for the individual grid column.
 *
 * @param int [$width] - The max width of the grid container
 * @param int [$gutter] - The spacing in between each column
 */
/**
 * @copyright   2010-2015, The Titon Project
 * @license     http://opensource.org/licenses/BSD-3-Clause
 * @link        http://titon.io
 */
/**
 * Calculate the width of an individual flex block. Take into account max widths and gutters.
 *
 * @param int $n - The current column
 * @param int $columns - The total number of columns
 * @param int [$width] - The max width of the flex container
 * @param int [$gutter] - The spacing in between each block
 */
/**
 * Styles for the region that contains blocks.
 *
 * @param int [$width] - The max width of the flex container
 */
/**
 * Align the blocks within a region horizontally or vertically.
 *
 * @param string [$align]
 */
/**
 * Set the orientation of blocks. Either display vertically or horizontally.
 *
 * @param string [$orientation]
 */
/**
 * Set the wrapping of blocks within a region.
 *
 * @param bool [$wrap]
 */
/**
 * Set the width, grow, and shrink settings for a block.
 *
 * @param int|string [$width] - Default width basis
 * @param int [$grow]
 * @param int [$shrink]
 */
/**
 * Override the blocks alignment set by the parent.
 *
 * @param string [$align]
 */
/**
 * Set the order of a block. Defaults to 100 so that custom blocks can be set higher.
 *
 * @param int [$order]
 */
/**
 * Set a block to grow by default.
 *
 * @param int|string [$width]
 */
/**
 * Set a block to shrink by default.
 *
 * @param int|string [$width]
 */
/**
 * @copyright   2010-2015, The Titon Project
 * @license     http://opensource.org/licenses/BSD-3-Clause
 * @link        http://titon.io
 */
/**
 * Media query for minimum resolution.
 *
 * @param string $min
 */
/**
 * Media query for maximum resolution.
 *
 * @param string $min
 */
/**
 * Media query for between minimum and maximum resolution.
 *
 * @param string $min
 * @param string $max
 */
/**
 * Media query for landscape orientation detection.
 */
/**
 * Media query for portrait orientation detection.
 */
/**
 * Media query for retina / HD displays.
 */
/**
 * Maximum width cascading media query for the xsmall breakpoint.
 */
/**
 * Minimum width cascading media query for the small breakpoint.
 */
/**
 * Minimum width cascading media query for the medium breakpoint.
 */
/**
 * Minimum width cascading media query for the large breakpoint.
 */
/**
 * Minimum width cascading media query for the xlarge breakpoint.
 */
/**
 * Generate either a `min-width`, `max-width`, or a combination of both for a range of breakpoints.
 *
 * @param list $range
 */
/**
 * A media query block that includes styles between a range of two xsmall breakpoints.
 */
/**
 * A media query block that includes styles between a range of two small breakpoints.
 */
/**
 * A media query block that includes styles between a range of two medium breakpoints.
 */
/**
 * A media query block that includes styles between a range of two large breakpoints.
 */
/**
 * A media query block that includes styles between a range of two xlarge breakpoints.
 */
/**
 * @copyright   2010-2015, The Titon Project
 * @license     http://opensource.org/licenses/BSD-3-Clause
 * @link        http://titon.io
 */
/**
 * Target the direct children of a button group, the li or button.
 */
/**
 * Target the first button within a button group.
 */
/**
 * Target the last button within a button group.
 */
/**
 * Generate a specific state for the custom checkbox toggle.
 *
 * @param string $pseudo
 */
/**
 * Generate a specific state for the custom radio toggle.
 *
 * @param string $pseudo
 */
/**
 * Generate show/hide display classes for a specific class.
 *
 * @param string $class
 */
/**
 * Generate a specific state for the custom select toggle.
 *
 * @param string $pseudo
 */
/**
 * Generate a specific state for the switch toggle.
 *
 * @param string $pseudo
 */
/**
 * @copyright   2010-2015, The Titon Project
 * @license     http://opensource.org/licenses/BSD-3-Clause
 * @link        http://titon.io
 */
/**
 * Clear all floats within the container.
 */
/**
 * Reset an inline-block element to defaults.
 */
/**
 * Reset a list and remove default styles.
 */
/**
 * Position an element to take up the whole screen.
 */
/**
 * Position an element using default absolute settings.
 */
/**
 * Align an element in the center of another element using position absolute.
 */
html {
  font: normal 12px/1.5rem "Droid Sans", sans-serif; }

body {
  background: #f7f9fa;
  color: #242a30;
  margin: 0;
  padding: 0 0 200px 0; }

a {
  text-decoration: none; }

.test-head {
  background: #1a2229;
  padding: 1rem;
  color: #fff;
  width: 100%;
  -webkit-justify-content: space-between;
      -ms-flex-pack: justify;
          justify-content: space-between;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center; }

.test-head-left {
  width: 100%;
  text-align: center;
  margin-bottom: 1rem; }

.test-head-center {
  text-align: center;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  margin: auto;
  -webkit-justify-content: center;
      -ms-flex-pack: center;
          justify-content: center; }
  .test-head-center .button,
  .test-head-center .input {
    border: 0; }
  .test-head-center .caret-left {
    margin-right: .5rem; }
  .test-head-center .caret-right {
    margin-left: .5rem; }

.test-head-right {
  display: none;
  -webkit-justify-content: flex-end;
      -ms-flex-pack: end;
          justify-content: flex-end;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  width: 25%; }
  .test-head-right .button {
    margin-left: .5rem; }

.test-head-logo {
  background: url("http://titon.io/img/logo.png") 50% 0 no-repeat;
  background-size: 184px 80px;
  width: 184px;
  height: 40px;
  position: relative;
  margin: auto; }
  .test-head-logo span {
    visibility: hidden; }
  .test-head-logo::after {
    content: attr(data-version);
    display: inline-block;
    position: absolute;
    left: 105%;
    top: 50%;
    color: #00acac;
    font-size: 1.5rem;
    -webkit-transform: translateY(-50%);
        -ms-transform: translateY(-50%);
            transform: translateY(-50%);
    white-space: nowrap; }

.test-head-prev {
  border-top-left-radius: 0.2rem;
  border-bottom-left-radius: 0.2rem; }

.test-head-next {
  border-top-right-radius: 0.2rem;
  border-bottom-right-radius: 0.2rem; }

.test-footer {
  padding: 2rem;
  text-align: center; }

.test-demo {
  padding: 2rem;
  border-bottom: 1px solid #d7dee5; }
  .test-demo:nth-child(even) {
    background: #e9eef1; }
  .test-demo > p:first-child {
    margin-top: 0; }
  .test-demo textarea {
    width: 100%;
    max-width: 100%; }

.test-demo-title {
  margin-bottom: 2rem;
  font-size: 2rem;
  text-align: center; }

.test-demo-body {
  display: inline-block;
  margin: 0 auto;
  position: relative;
  left: 50%;
  -webkit-transform: translateX(-50%);
      -ms-transform: translateX(-50%);
          transform: translateX(-50%);
  text-align: center; }
  .test-demo-body.full {
    position: static !important;
    display: block !important;
    left: 0 !important;
    right: 0 !important;
    -webkit-transform: none !important;
        -ms-transform: none !important;
            transform: none !important;
    text-align: left; }
  .test-demo-body.align-center {
    text-align: center !important; }
  .test-demo-body.align-left {
    text-align: left !important; }

.test-note {
  margin: 1.5rem 0;
  color: #242a30;
  opacity: .5;
  text-align: center; }
  .test-note:last-child {
    margin-bottom: 0; }

.test-base-fluid {
  max-width: 800px;
  margin: auto; }

.test-responsive-table {
  width: 100%;
  border-spacing: .5rem;
  border-collapse: separate; }
  .test-responsive-table td {
    padding: 1rem;
    max-width: 50%; }
    .test-responsive-table td[class*="show-"] {
      background: #7cdda7;
      color: #003434; }
    .test-responsive-table td[class*="hide-"] {
      background: #f8b2b2;
      color: #732927; }

@media only screen and (min-width: 641px) {
  html {
    font-size: 13px; }
  .test-head {
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex; }
  .test-head-left {
    margin: 0;
    text-align: left; }
  .test-head-logo {
    margin: 0; } }

@media only screen and (min-width: 961px) {
  html {
    font-size: 14px; }
  .test-head-left {
    width: 25%; }
  .test-head-center {
    -webkit-justify-content: center;
        -ms-flex-pack: center;
            justify-content: center; }
  .test-head-right {
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex; }
  .test-demo {
    padding: 3rem 4rem 3rem 4rem; } }
